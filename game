#include <iostream>
#include "raylib.h"

using namespace std;


const int screenHeight = 1000;
const int screenWidth = 1200;

struct player
{
	int x;
	int y;
	int width=100;
	int height=100;
};

int main()
{

 InitWindow(screenWidth, screenHeight, "METAL SLUG Game");
  
Texture2D bg1 = LoadTexture("C:\\Users\\rania\\Downloads\\bg1.png");
bg1.width = screenWidth;
bg1.height = screenHeight;
Vector2 bg1pos = { 0,0 };

Texture2D bg2 = LoadTexture("C:\\Users\\rania\\Downloads\\bg2.png");
bg2.width = screenWidth;
bg2.height = screenHeight;
Vector2 bg2pos = { screenWidth,0 };

	player p;
	p.x =  (player1.width / 2);
	p.y = screenHeight - player1.height;

	e1.x = (screenWidth - enemy1.width / 2) + 50;
	e1.y = screenHeight - enemy1.height;
   
	e2.x = (screenWidth - enemy2.width / 2) + 100;
	e2.y = screenHeight - enemy2.height;
   
	int bgspeed = 2;

	SetTargetFPS(60);

	while (!WindowShouldClose())
	{
		bg1pos.x -= bgspeed;
		bg2pos.x -= bgspeed;

		if (bg1pos.x + bg1.width <= 0)
		{
			bg1pos.x = screenWidth;
		}
		if (bg2pos.x + bg2.width <= 0)
		{
			bg2pos.x = screenWidth;
		}


		//player bullets 
		if (IsKeyPressed(KEY_SPACE))
		{
			for (int i = 0; i < B; i++)
			{
				if (!bullets[i].isactive)
				{
					bullets[i].x = p.x + player1.width / 2;
					bullets[i].y = p.y + 40;
					bullets[i].isactive = true;
					break;
				}
			}
		}
	   
		for (int i = 0; i < B; i++)
		{
			if (bullets[i].isactive)
			{
				bullets[i].x += 10;
				if (bullets[i].x > screenWidth) bullets[i].isactive = false;
			}
		}
	   
		for (int i = 0; i < B; i++)
		{
			if (bullets[i].isactive)
			{
				Rectangle bulletrec = { bullets[i].x , bullets[i].y ,bullet1.width ,bullet1.height };
				Rectangle enemyrec = { e1.x , e1.y ,enemy1.width ,enemy1.height };
				Rectangle enemy2rec = { e2.x , e2.y ,enemy2.width ,enemy2.height };
				
	   
				if (CheckCollisionRecs(enemyrec, bulletrec)) 
				{ 
					bullets[i].isactive = false; 
					e1.x = screenWidth;
					score++; 
				}
				if (CheckCollisionRecs(enemy2rec, bulletrec)) 
				{ 
					bullets[i].isactive = false;
				e2.x = screenWidth;
				score++;
				}
				
			}
		}
		

		BeginDrawing();
		ClearBackground(RAYWHITE);

		DrawTexture(bg1, bg1pos.x, bg1pos.y, WHITE);
		DrawTexture(bg2, bg2pos.x, bg2pos.y, WHITE);
		DrawTexture(player1, p.x, p.y, WHITE);

		EndDrawing();
	}
}

	return 0;
}
